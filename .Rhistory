# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Loading 'dataset_hw1.csv' using read.csv(). By inspection, the first row contains the header.
setwd("C:/95868_Assignment")
# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Loading 'dataset_hw1.csv' using read.csv(). By inspection, the first row contains the header.
expenditures = read.csv(file = 'dataset_hw1.csv', header = TRUE, sep = ",")
# # Count the number of variables by counting the number of columns of the dataset using ncol() command.
NumVar = ncol(expenditures)
# List the different  levels of the race of each of the respondent.
Race <- levels(expenditures$race.ref.person)
# Count the number of the respondents with respect to their races.
library(plyr)
Race_Cnt = ddply(expenditures, "race.ref.person", summarize, Num.Race = length(race.ref.person))
#Compute for the fraction of the different races with respect to the total respondents
Race_Fraction = ddply(Race_Cnt, "race.ref.person", mutate, Race.Fraction = Num.Race/sum(Race_Cnt$Num.Race))
Race_Fraction
# Change the all the race into others (all else) except for black and white
expenditures$race.ref.person = mapvalues(expenditures$race.ref.person, from = c("multi-race", "native american", "pacific islander", "white"), to = c("others(all else)", "others(all else)", "others(all else)", "others(all else)") )
#Print the number of respondents based on their races (black, white, and others)
NewRace = ddply (expenditures, "race.ref.person", summarize, NumRace = length(race.ref.person))
NewRace
# Create a household table indicating the number of records in each region
GenPop = ddply(expenditures, "region", summarize, GeneralPop = length(region))
# Create a list of regions where 'income.rank'is greater than 0.96
RichPop = subset (expenditures, "region", subset = income.rank > 0.96)
#Create a household table indicating the number of records of  the rich population where 'income,rank' is greater than 0.96, in each region.
CntRich = ddply(RichPop, "region", summarize, Rich_Pop= length(region))
#Create a table of the percentage of households in each region using the created GenPop table.
NewGenPop = ddply (GenPop, "region", mutate, general.pop = GeneralPop/ sum(GenPop$GeneralPop)*100)
NewGenPop
#Create a table of the percentage of households whose `income.rank` is greater than 0.96 in each region
NewRichPop = ddply (CntRich, "region", mutate, rich.pop= Rich_Pop/ sum(CntRich$Rich_Pop) *100)
NewRichPop
# Merge the the created table for the general (NewGenPop)  and rich (NewRichPop) population.
PopData = merge(x = NewGenPop, y = NewRichPop, by.x = "region", by.y = "region", all.x = TRUE)
PopData
# For 'select ()' function, to select a specific data frame and print it as a table.
library(dplyr)
# Select a specific data (column selection) to display.
NewPopData = select(PopData, c("region", "general.pop", "rich.pop"))
# Print the 'NewPopData' Table containing the following columns: 'region', 'general.pop' and 'rich.pop'
NewPopData
# Merge the the created table for the general (NewGenPop)  and rich (NewRichPop) population.
Diff_GenRichPop = ddply(NewPopData, "region", mutate, Diff_GR_Pop = general.pop - rich.pop)
# Print the 'Diff_GenRichPop' Table containing the main differences in the percentages for the general and rich population
Diff_GenRichPop
library(ggplot2movies) # contains the movies dataset
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
movies = data("movies")
movies
# Add code and comments
data("movies")
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
# Add code and comments
data("movies")
# Add code and comments
data("movies")
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
# Add code and comments
data("movies")
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
data
# Add code and comments
movies = data("movies")
movies
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
View(expenditures)
force(movies)
# Add code and comments
data("movies")
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
head(movies)
# Add code and comments
data("movies")
summary(movies)
# Add code and comments
movies= head(movies)
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
movies= head(movies)
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
movies
library(plyr)
library(ggplot2)
library(reshape2)
mpg.means = ddply(mpg, 'class', summarize, avg.cty = mean(cty))
mpg.means
ggplot(data = mpg.means, mapping=aes(x=class, y = avg.cty, group=1)) + geom_bar(stat='identity')
# check the order of the levels
levels(mpg.means$class)
# the reorder command changes the ordering of the vehicle classes
mpg.means$class = with(mpg.means, reorder(class, avg.cty, mean))
# what is the new order of the levels?
levels(mpg.means$class)
mpg.plot = ggplot(data = mpg.means, mapping=aes(x=class, y = avg.cty, group=1)) + geom_bar(stat='identity')
mpg.plot
# Select 4 classes and their ordering
mpg.plot + scale_x_discrete(limits = c('compact', 'midsize', 'suv', 'pickup'), labels = c('Compact', 'Midsize', 'SUV', 'Truck'))
mpg.plot = mpg.plot + labs(x = '', y = 'Miles Per Gallon', title='City Mileage by Class')
mpg.plot
mpg.plot + labs(title='Average City Mileage \n (Grouped by Class)')
# change the font size to 22
mpg.plot + theme(text = element_text(size=22))
# change the font size to 22, and rotate the x axis categories
mpg.plot + theme(text = element_text(size=22), axis.text.x = element_text(angle=45, vjust=1, hjust=1))
# make discrete levels from hwy
mpg = mutate(mpg, hwy.cat = cut_number(hwy, n = 4))
# reorder the classes for nicer plot
mpg$class = with(mpg, reorder(class, hwy, mean))
# how many records in each class, for different hwy levels?
ggplot(data = mpg, mapping=aes(x = class)) + geom_bar() + facet_wrap('hwy.cat', ncol=1)
# A small data frame
small.df = data.frame(treatment = c('Yes', 'No'), ymin = c(5, 2), ymax = c(6, 4), outcome = c(5.5, 3))
# This plot says: treatment makes something better!
ggplot(data = small.df, mapping = aes(x = treatment, ymin = ymin, ymax = ymax, color = treatment)) + geom_errorbar(width=.3) + geom_point(mapping=aes(y=outcome), size=4)
# compute an error bar for the mean of cty in the whole data set:
errorbar.df = mean_cl_normal(mpg$cty)
library(ggplot2movies) # contains the movies dataset
library(ggplot2)
library(plyr)
library(reshape2)
# Add code and comments
data("movies")
movies
# Add code and comments
